<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Danilo Herrera</title>
    <link>https://www.danherrera.dev/</link>
    <description>Recent content on Danilo Herrera</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Apr 2023 01:00:00 -0400</lastBuildDate><atom:link href="https://www.danherrera.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Defining a Kotlin DSL for building nested hierarchies</title>
      <link>https://www.danherrera.dev/posts/230408-kotlin-nested-dsl/</link>
      <pubDate>Sat, 08 Apr 2023 01:00:00 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/230408-kotlin-nested-dsl/</guid>
      <description>One of the Kotlin programming language&amp;rsquo;s strengths is the ability to easily define a language for a specific use case, or a domain-specific language (DSL). In this post, I will showcase how we can define a domain-specific language to create objects with nested hierarchies. Imagine that we have a list of authors and each author can have more than one book and each book consists of several chapters:
data class Author( val id: String, val firstName: String, val lastName: String, val books: List&amp;lt;Book&amp;gt; ) data class Book( val id: String, val title: String, val chapters: List&amp;lt;Chapter&amp;gt; ) data class Chapter( val id: String, val number: Int, val title: String ) The goal of this post is to be able to easily create these objects and only provide the information that is available and have defaults for the information that is not.</description>
    </item>
    
    <item>
      <title>Tracking Jira tickets with Dendron</title>
      <link>https://www.danherrera.dev/posts/220921-dendron-checklists/</link>
      <pubDate>Wed, 21 Sep 2022 01:00:00 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/220921-dendron-checklists/</guid>
      <description>Dendron is an open source knowledge management tool that I have incorporated into my personal and professional life to capture knowledge, write journals, maintain to-do lists, etc. In this post, I describe one aspect of Dendron that I find particularly useful: leveraging the power of templates to automate the creation of checklists.
Background Dendron is a VS Code extension and therefore all interaction is performed via VS Code. A Dendron project is called a vault.</description>
    </item>
    
    <item>
      <title>Configuring Autoreload for Ktor</title>
      <link>https://www.danherrera.dev/posts/200623-ktor-autoreload/</link>
      <pubDate>Tue, 23 Jun 2020 17:31:45 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/200623-ktor-autoreload/</guid>
      <description>In this post, we&amp;rsquo;ll be going over how to create a basic Ktor project and configuring it with autoreload, a feature that automatically rebuilds the code on file changes. Furthermore, we&amp;rsquo;ll explore two ways of building and running the application: via the command line and via the IDE.
Creating a Ktor project Using the latest version of IntelliJ IDEA, ensure the latest Ktor plugin is installed.
This plugin provides us with a convenient user interface to generate new Ktor projects.</description>
    </item>
    
    <item>
      <title>An Introduction to Tracking Transactions with Ledger CLI</title>
      <link>https://www.danherrera.dev/posts/191214-ledgercli-intro/</link>
      <pubDate>Sat, 14 Dec 2019 17:31:45 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/191214-ledgercli-intro/</guid>
      <description>Introduction Ledger CLI is an open source command line accounting tool used for calculating reports from a ledger (a file containing a list of transactions for different accounts). With Ledger CLI you are able to view a register (a list of transactions), balance of accounts, budget report, etc. In this post, I&amp;rsquo;ll be going over defining a basic ledger and calculating balance and register reports.
Prerequisites Essential Ledger CLI Optional VS Code I know: a text editor for a command line tool?</description>
    </item>
    
    <item>
      <title>Reference: Signing Commits with GPG</title>
      <link>https://www.danherrera.dev/posts/190619-commits-gpg/</link>
      <pubDate>Wed, 19 Jun 2019 17:31:45 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/190619-commits-gpg/</guid>
      <description>Creating a GPG Key Create a key with gpg --gen-key and input your name, email address, and passphrase when prompted. For more options, use gpg --full-generate-key.
To view secret keys: gpg --list-secret-keys or gpg -K
To export secret keys: gpg --export-secret-keys $ID &amp;gt; private-key.asc
To export public key for sharing: gpg --armor --export $ID &amp;gt; public-key.asc or gpg --armor --export $EMAIL &amp;gt; public-key.asc
Using the GPG Key with Git In your git repo:</description>
    </item>
    
    <item>
      <title>Setting up a Ghost blog on a VPS with Docker</title>
      <link>https://www.danherrera.dev/posts/190130-ghost-blog/</link>
      <pubDate>Wed, 30 Jan 2019 17:31:45 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/190130-ghost-blog/</guid>
      <description>What better way to start out a tech blog than by writing out my process on how I set the blog up? By day, I am an Android developer, so this was a bit out of my comfort zone.
Although I have set up a few Wordpress blogs, this was several years ago (pre-Docker), and I was never fond of the amount of effort required to make the aesthetics decent. Ghost looks nice out of the box, and they offer a (limited) selection of free themes.</description>
    </item>
    
  </channel>
</rss>
