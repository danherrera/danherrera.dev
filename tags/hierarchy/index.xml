<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hierarchy on Danilo Herrera</title>
    <link>https://www.danherrera.dev/tags/hierarchy/</link>
    <description>Recent content in hierarchy on Danilo Herrera</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Apr 2023 01:00:00 -0400</lastBuildDate><atom:link href="https://www.danherrera.dev/tags/hierarchy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Defining a Kotlin DSL for building nested hierarchies</title>
      <link>https://www.danherrera.dev/posts/230408-kotlin-nested-dsl/</link>
      <pubDate>Fri, 07 Apr 2023 01:00:00 -0400</pubDate>
      
      <guid>https://www.danherrera.dev/posts/230408-kotlin-nested-dsl/</guid>
      <description>One of the Kotlin programming language&amp;rsquo;s strengths is the ability to easily define a language for a specific use case, or a domain-specific language (DSL). In this post, I will showcase how we can define a domain-specific language to create objects with nested hierarchies. Imagine that we have a list of authors and each author can have more than one book and each book consists of several chapters:
data class Author( val id: String, val firstName: String, val lastName: String, val books: List&amp;lt;Book&amp;gt; ) data class Book( val id: String, val title: String, val chapters: List&amp;lt;Chapter&amp;gt; ) data class Chapter( val id: String, val number: Int, val title: String ) The goal of this post is to be able to easily create these objects and only provide the information that is available and have defaults for the information that is not.</description>
    </item>
    
  </channel>
</rss>
